name: Deploy Sha Pay Backend

on:
  push:
    branches: [ main, production ]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: sha_pay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "Linting not configured"
    
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/sha_pay_test
        JWT_SECRET: test_jwt_secret
        ENCRYPTION_KEY: test_encryption_key
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging (Heroku)
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://${{ vars.HEROKU_STAGING_APP }}.herokuapp.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ vars.HEROKU_STAGING_APP }}
        heroku_email: ${{ vars.HEROKU_EMAIL }}
        appdir: backend
        procfile: "web: npm run prod:start"
        healthcheck: "https://${{ vars.HEROKU_STAGING_APP }}.herokuapp.com/health"
        delay: 5
        rollbackonhealthcheckfailed: true
    
    - name: Run database migrations
      run: |
        curl -X POST https://api.heroku.com/apps/${{ vars.HEROKU_STAGING_APP }}/dynos \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -d '{"command": "npm run db:migrate", "attach": false}'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/production'
    environment:
      name: production
      url: https://${{ vars.HEROKU_PRODUCTION_APP }}.herokuapp.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Heroku Production
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ vars.HEROKU_PRODUCTION_APP }}
        heroku_email: ${{ vars.HEROKU_EMAIL }}
        appdir: backend
        procfile: "web: npm run prod:start"
        healthcheck: "https://${{ vars.HEROKU_PRODUCTION_APP }}.herokuapp.com/health"
        delay: 10
        rollbackonhealthcheckfailed: true
    
    - name: Run database migrations
      run: |
        curl -X POST https://api.heroku.com/apps/${{ vars.HEROKU_PRODUCTION_APP }}/dynos \
          -H "Authorization: Bearer ${{ secrets.HEROKU_API_KEY }}" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.heroku+json; version=3" \
          -d '{"command": "npm run db:migrate", "attach": false}'
    
    - name: Notify deployment success
      run: |
        echo "üöÄ Production deployment completed successfully!"
        echo "üåê Application URL: https://${{ vars.HEROKU_PRODUCTION_APP }}.herokuapp.com"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'